@page "/home"
@using MoneyManager.Models
@using MoneyManager.Services
@inject ITransactionService transactionService
@inject AuthenticationStateService authStateService

<style>
    /* General page styling */
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    h3{
     text-align: center;
     font-family: 'Times New Roman', Times, Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
    }

    h1, h2 {
        text-align: center;
        margin-bottom: 20px;
    }

    h1 {
        margin-top: 20px;
    }

    .dashboard-container {
        max-width: 800px;
        margin: 0 auto;
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        padding: 20px;
    }

    .dashboard-item {
        flex: 1 1 calc(50% - 20px); /* Each item takes 50% width, minus spacing */
        background-color: #ffffff;
       
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        text-align: center;
        min-width: 250px;
    }

    .dashboard-item h4 {
        font-size: 1.2rem;
        margin-bottom: 10px;
    }

    .dashboard-item p {
        font-size: 1.1rem;
        margin: 0;
        font-weight: bold;
        color: deeppink;
    }

    .date-filter-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 15px;
        margin-bottom: 20px;
    }

        .date-filter-container label {
            font-size: 14px;
        }

        .date-filter-container input,
        .date-filter-container button {
            padding: 8px 10px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .date-filter-container button {
            
            cursor: pointer;
        }

            .date-filter-container button:hover {
                background-color: lightgrey;
            }



    
    
</style>



<h1>Welcome, @authStateService.GetAuthenticatedUser().Name!</h1>

@if (authStateService.IsAuthenticated())
{
    <h2>Your Currency: @authStateService.GetAuthenticatedUser().Currency</h2>
    <h3>Dashboard Summary</h3>


    <div class="date-filter-container">
        <label for="startDate">Start Date:</label>
        <input type="date" @bind="startDate" />

        <label for="endDate">End Date:</label>
        <input type="date" @bind="endDate" />

        <button @onclick="ApplyDateFilter">Filter</button>
        <button @onclick="ResetFilters">Reset</button>
    </div>



    <div class="dashboard-container">
        <div class="dashboard-item">
        <h4>Total Inflow:</h4>
        <p>@authStateService.GetAuthenticatedUser().Currency @totalInflow</p>
        </div>
         <div class="dashboard-item">
         <h4>Total Outflow:</h4>
        <p>@authStateService.GetAuthenticatedUser().Currency @totalOutflow</p>
        </div>
        @* <p><strong>Total Debt: </strong>@authStateService.GetAuthenticatedUser().Currency @totalDebt</p>*@
         <div class="dashboard-item">
         <h4>Paid Debt:</h4>
        <p>@authStateService.GetAuthenticatedUser().Currency @paidDebt</p>
        </div>
         <div class="dashboard-item">
         <h4>Remaining Debt:</h4>
        <p>@authStateService.GetAuthenticatedUser().Currency @remainingDebt</p>
        </div>
         <div class="dashboard-item">
         <h4>Total Balance: </h4>
        <p>@authStateService.GetAuthenticatedUser().Currency @totalBalance</p>
        </div>
    </div>
}

@code {
    private decimal totalInflow;
    private decimal totalOutflow;
    private decimal totalDebt;
    private decimal paidDebt;
    private decimal remainingDebt;
    private decimal totalBalance;


    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        await LoadAndCalculateTotals();
    }

    private async Task LoadAndCalculateTotals()
    {
        var transactions = await transactionService.LoadTransactionAsync();
        
        if (startDate.HasValue && endDate.HasValue)
        {
            transactions = transactions.Where(t => t.Date >= startDate.Value && t.Date <= endDate.Value).ToList();
        }
        
        totalInflow = transactions.Where(t => t.Type == "Inflow").Sum(t => t.Amount);
        totalOutflow = transactions.Where(t => t.Type == "Outflow").Sum(t => t.Amount);
        totalDebt = transactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        paidDebt = transactions.Where(t => t.Type == "Debt" && t.IsPaid).Sum(t => t.Amount);
        remainingDebt = totalDebt - paidDebt;
        totalBalance = totalInflow - totalOutflow - paidDebt;
    }

     private async Task ApplyDateFilter()
    {
        await LoadAndCalculateTotals();
    }

    private async Task ResetFilters()
    {
        startDate = null;
        endDate = null;
        await LoadAndCalculateTotals();
    }

}
