@page "/add-transactions"
@using MoneyManager.Models
@using MoneyManager.Services
@inject ITransactionService transactionService
@inject AuthenticationStateService authStateService
@inject ICategoryService categoryService
@inject TransactionSummaryService summaryService


<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    h3 {
        text-align: center;
        margin: 20px 0;
    }

    form {
        max-width: 400px;
        margin: 0 auto;
        background-color: #ffffff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        form div {
            margin-bottom: 15px;
        }

    label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    input[type="text"],
    input[type="number"],
    input[type="date"],
    select,
    textarea {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    input,
    select,
    textarea {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 14px;
    }

        input[type="radio"] {
            margin-right: 8px;
        }

    .radio-group {
        display: flex;
        gap: 15px;
        align-items: center;
        justify-content: center;
        margin-bottom: 5px;
    }

    textarea {
        resize: none;
    }

    button[type="button"] {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        font-weight: bold;
        color: #ffffff;
        background-color: hotpink;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        button[type="button"]:hover {
            background-color: palevioletred;
        }

    /* Error and success messages */
    div[error-message],
    div[success-message] {
        margin-top: 10px;
        padding: 10px;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    div[error-message] {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
    }

    div[success-message] {
        background-color: #d1e7dd;
        color: #0f5132;
        border: 1px solid #badbcc;
    }
</style>



<h3>Add Transaction</h3>

<form> <!-- Form to collect transaction details from the user -->
    <div>
        <label for="title" class="fw-bold">Title</label>
        <input type="text" id="title" @bind="newItem.Title" placeholder="Enter title" />
    </div>

    <div>
        <label for="amount" class="fw-bold">Amount</label>
        <input type="number"
               id="amount"
               placeholder="Amount"
               @bind="newItem.Amount"
               style="padding-left: 30px; width: 100%;" />
    </div>

    <div>
        <label for="date" class="fw-bold">Date</label>
        <input type="date" id="date" @bind="newItem.Date" />
    </div>

    <div>
        <label for="tag" class="fw-bold">Category</label>
        <select id="tag" @bind="newItem.Tag">
            @foreach (var category in categories)
            {
            <option value="@category.Name">@category.Name</option>
            }
            
        </select>

        
    </div>

    <div>
        <label for="note" class="fw-bold">Note</label>
        <textarea id="note" rows="3" @bind="newItem.Description" placeholder="Enter note (optional)"></textarea>
    </div>


    <div>
        <label class="fw-bold">Type</label>
        <div class="radio-group">
            <div>
                <input type="radio" id="inflow" name="type" value="Inflow" @onchange="e => newItem.Type = e.Value.ToString()" />
                <label for="inflow">Inflow</label>
            </div>
            <div>
                <input type="radio" id="outflow" name="type" value="Outflow" @onchange="e => newItem.Type = e.Value.ToString()" />
                <label for="outflow">Outflow</label>
            </div>
            <div>
                <input type="radio" id="debt" name="type" value="Debt" @onchange="e => newItem.Type = e.Value.ToString()" />
                <label for="debt">Debt</label>
            </div>
        </div>
    </div>


    @if (newItem.Type == "Debt")
    {
        <div>
            <label for="dueDate" class="fw-bold">Due Date</label>
            <input type="date" id="dueDate" @bind="newItem.DueDate" />
        </div>

        <div>
            <label for="source" class="fw-bold">Source</label>
            <input type="text" id="source" @bind="newItem.Source" placeholder="Enter source of debt" />
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div>
            @errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div>
            @successMessage
        </div>
    }

    <button type="button" @onclick="AddNewTask">Add</button>
</form>

@code {
    // Initialize new transaction and categories list
    private Transaction newItem = new Transaction { Date = DateTime.Today };
    private List<Category> categories = new List<Category>();
    private string errorMessage;
    private string successMessage;
    private decimal totalBalance;

    // On page load, initialize categories and calculate the total balance
    protected override async Task OnInitializedAsync()
    {
        var transactions = await transactionService.LoadTransactionAsync();

        var summary = summaryService.CalculateSummary(transactions);
        totalBalance = summary.TotalBalance;

        categories = await categoryService.LoadCategoriesAsync();
        
    }
    // Method to handle form submission and validation
    private async Task AddNewTask()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newItem.Title) || newItem.Amount <= 0 || string.IsNullOrWhiteSpace(newItem.Type))
            {
                errorMessage = "Title, valid amount and type are required.";
                successMessage = null;
                return;
            }

            // Validation for category
            if (string.IsNullOrWhiteSpace(newItem.Tag))
            {
                errorMessage = "Please select a valid category.";
                successMessage = null;
                return;
            }
            // Validate for Outflow transaction type to ensure it doesn't exceed total balance
            if (newItem.Type == "Outflow" && newItem.Amount > totalBalance)
            {
                errorMessage = "The Outflow amount cannot exceed the total balance.";
                successMessage = null;
                return;
            }
            // Validation for Debt transaction
            if (newItem.Type == "Debt")
            {
                if (!newItem.DueDate.HasValue || string.IsNullOrWhiteSpace(newItem.Source))
                {
                    errorMessage = "Please provide both Due Date and Source for Debt.";
                    successMessage = null;
                    return;
                }

                // Check if Due Date is before Transaction Date
                if (newItem.DueDate.Value < newItem.Date)
                {
                    errorMessage = "Due Date cannot be earlier than the Transaction Date.";
                    successMessage = null;
                    return;
                }
            }
            // Assign a unique Task ID for the transaction
            newItem.TaskId = Guid.NewGuid();

            await transactionService.SaveTransactionAsync(newItem);
            // Save the transaction asynchronously
            newItem = new Transaction { Date = DateTime.Today };
            successMessage = "Transaction added successfully!";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }   

}

