@page "/register"
@using MoneyManager.Models
@using MoneyManager.Services
@inject NavigationManager navigationManager
@inject IUserService userService

<style>
    /* Global Styles */
    body {
        font-family: Arial, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }
    /* Login Form Container */
    form {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
    }

    /* Form Heading */
    h3 {
        text-align: center;
        margin-bottom: 20px;
        font-size: 24px;
        color: #333;
    }

    /* Input Fields */
    input[type="text"],
    input[type="password"],
    input[type="tel"],
    select {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
    }

    /* Button */
    button {
        width: 100%;
        padding: 10px;
        background-color: hotpink;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
    }

        button:hover {
            background-color: lightgray;
        }

    /* Link */
    a {
        text-decoration: none;
        color: #007bff;
    }

        a:hover {
            text-decoration: underline;
        }

    /* Error Message */
    .error-message {
        color: red;
        text-align: center;
        margin-top: 10px;
    }

</style>


<div class="register-container">

    <form>
    <h3>Register</h3>


        <div>
    
        
                <div>
                    <label>User Name:</label>
                    <input type="text" @bind="newUser.UserName" />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" @bind="newUser.Password" />
                </div>
        
                <div>
                    <label>Name:</label>
                    <input type="text" @bind="newUser.Name" />
                </div>
      
        
                <div>
                    <label>Phone:</label>
                    <input type="tel"
                
                        @bind="newUser.Phone" />
            
                </div>
                <button type="button" @onclick="AddNewUser">Register</button>
    
            <p>
                Already have an account?
                <a href="/">Sign In</a>
            </p>
        </div>
    </form>
</div>

@if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
}



@if (retrievedUser != null)
{
    <h4>User Details:</h4>
    <p><strong>Name:</strong> @retrievedUser.Name</p>
    <p><strong>Phone:</strong> @retrievedUser.Phone</p>
}

@code {
    private User newUser = new User(); //obj created for User Class
    private string errorMessage;

    // New field for searching user
    private String searchUserName;

    // Field to hold retrieved user information
    private User retrievedUser;

    private async Task AddNewUser()
    {
        try
        {
            var existingUsers = await userService.LoadUsersAsync();
            // condition chek

            // checking if UserName is unique
            if (existingUsers.Any(u => u.UserName == newUser.UserName)){
                errorMessage = "User Name must be unique. This user name already exist.";
                return;
            }
            //Save the new user
            await userService.SaveUserAsync(newUser);
            // Reset the new user object after saving.
            newUser = new User();
            errorMessage = null; // Clear any previous error messages
            navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Fill the form.";
            Console.WriteLine(errorMessage); // Log for debugging
        }
    }

    private async Task GetUserInfo()
    {
        try
        {
            var users = await userService.LoadUsersAsync();
            retrievedUser = users.FirstOrDefault(u => u.UserName == searchUserName);

            if (retrievedUser == null)
            {
                errorMessage = "No user found with this User Name.";
            }
            else
            {
                errorMessage = null; // Clear any previous error messages
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while retrieving the user: {ex.Message}";
            Console.WriteLine(errorMessage); // Log for debugging
        }
    }
}
